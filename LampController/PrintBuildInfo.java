// vim: shiftwidth=4
// vim: ts=4

import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

class PrintBuildInfo {
	private static void println(String msg)
	{
		System.out.println(msg);
	}

	private final static boolean caseEqual(	String	s1, String s2)
	{
		String	l1 = s1.toLowerCase();
		String	l2 = s2.toLowerCase();
		return l1.equals(l2);
	}

	/** Boolean option flag. */
	private static final class BooleanOption {
		String	FieldName;
		String	Comment;
		boolean	Value;

		/** Construct record. */
		public BooleanOption(	String field_name, String comment, boolean default_value)
		{
			FieldName = field_name;
			Comment = comment;
			Value = default_value;
		}

		private boolean caseEqual(	String	s1, String s2)
		{
			String	l1 = s1.toLowerCase();
			String	l2 = s2.toLowerCase();
			return l1.equals(l2);
		}

		/** Check given argument. */
		boolean checkArgument(	String arg)
		{
			int n = arg.length();
			if (caseEqual(FieldName, arg)) {
				Value = true;
				return true;
			}
			if (n>=2) {
				char c = arg.charAt(0);
				String s = arg.substring(1,n);
				if (c=='+' && caseEqual(FieldName, s) ) {
					Value = true;
					return true;
				}
				if (c=='-' && caseEqual(FieldName, s) ) {
					Value = false;
					return true;
				}
			}
			return false;
		}

		/** Original argument */
		String argument()
		{
			return Value ? ("+" + FieldName) : ("-" + FieldName);
		}

		/** Print code. */
		private void println()
		{
			System.out.println("	// " + Comment);
			System.out.println("	public final static boolean	" + FieldName + " = " + (Value ? "true" : "false") + ";");
		}

	}

	/* ----------------------------------------------------------------------------- */
	/** String option. */
	private static class StringOption {
		String	FieldName;
		String	Comment;
		String	Value;

		/** Construct record. */
		public StringOption(	String field_name, String comment, String default_value)
		{
			FieldName = field_name;
			Comment = comment;
			Value = default_value;
		}

		/** Check given argument. */
		public final boolean checkArgument(	String arg)
		{
			int eqpos = arg.indexOf('=');
			if (eqpos>0 && caseEqual(FieldName, arg.substring(0, eqpos))) {
				Value = arg.substring(eqpos+1);
				return true;
			}
			return false;
		}

		/** Original argument */
		String argument()
		{
			return FieldName + "=" + Value;
		}

		/** Print code. */
		private void println()
		{
			System.out.println("	// " + Comment);
			System.out.println("	public final static String " + FieldName + " = \"" + Value + "\";");
		}
	} // class StringOption

	public static void main(String[] args) {
		Date				dt = new Date();
		SimpleDateFormat	sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		boolean				have_log_to_serial = false;
		boolean				have_shutdown = true;

		BooleanOption	b_options[] = {
			new BooleanOption("logToSerial", "Output log to serial?", false),
			new BooleanOption("shutDown", "Capability to shutdown", true),
			new BooleanOption("powerLight", "Connected to the power light", false)
		};
		StringOption	s_options[] = {
			new StringOption("server", "Server IP:port", "194.204.26.104:8080")
		};

		// Check arguments.
		for (int i=0; i<args.length; ++i) {
			String arg = args[i];
			boolean ok = false;
			for (int j=0; j<b_options.length; ++j) {
				BooleanOption	b_opt = b_options[j];
				if (b_opt!=null && b_opt.checkArgument(arg)) {
					ok = true;
					break;
				}
			}

			for (int j=0; j<s_options.length; ++j) {
				StringOption	s_opt = s_options[j];
				if (s_opt!=null && s_opt.checkArgument(arg)) {
					ok = true;
					break;
				}
			}
			if (!ok) {
				println("Unknown option: " + arg);
			}
		}

		// Emit prefix.
		println("// Automatically generated by build.bat ");
		println("// vim: shiftwidth=4 ");
		println("// vim: ts=4 ");
		println("");
		println("package com.errapartengineering.LampController; ");
		println("import java.util.Date;");
		println("");
		println("// Build info. ");
		println("public final class BuildInfo { ");
		println("	// Build date: " + dt);
		println("	public final static String buildDate = \"" + sdf.format(dt)+ "\";");

		// Emit boolean options.
		StringBuffer	sb = new StringBuffer();
		for (int i=0; i<b_options.length; ++i) {
			BooleanOption	opt = b_options[i];
			opt.println();
			if (i>0) {
				sb.append(',');
			}
			sb.append(opt.argument());
		}

		// Emit string options.
		for (int i=0; i<s_options.length; ++i) {
			StringOption	opt = s_options[i];
			opt.println();
			if (i>0 || b_options.length>0) {
				sb.append(',');
			}
			sb.append(opt.argument());
		}

		println("	public final static String compilationArguments = \"" + sb + "\";");
		println("} // class Build ");
	}
} // print build info.

